# Generated by Django 5.2 on 2025-07-10 12:36

import django.db.models.deletion
import management.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('management', '0003_model_exclusion'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileObject',
            fields=[
                ('id', models.CharField(default=management.models.generate_file_id, editable=False, help_text='The file identifier, which can be referenced in the API endpoints.', max_length=100, primary_key=True, serialize=False)),
                ('bytes', models.BigIntegerField(help_text='The size of the file, in bytes.')),
                ('created_at', models.PositiveIntegerField(help_text='The Unix timestamp (in seconds) for when the file was created.')),
                ('filename', models.CharField(help_text='The name of the file.', max_length=255)),
                ('purpose', models.CharField(choices=[('assistants', 'assistants'), ('batch', 'batch'), ('fine-tune', 'fine-tune'), ('vision', 'vision'), ('user_data', 'user_data'), ('evals', 'evals')], help_text='The intended purpose of the file.', max_length=20)),
                ('expires_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the file will expire.', null=True)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='management.token')),
            ],
            options={
                'verbose_name': 'File Object',
                'verbose_name_plural': 'File Objects',
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.CharField(editable=False, help_text='The batch identifier.', max_length=100, primary_key=True, serialize=False)),
                ('completion_window', models.CharField(help_text='The time frame within which the batch should be processed.', max_length=100)),
                ('created_at', models.PositiveIntegerField(help_text='The Unix timestamp (in seconds) for when the batch was created.')),
                ('endpoint', models.CharField(help_text='The OpenAI API endpoint used by the batch.', max_length=255)),
                ('status', models.CharField(choices=[('validating', 'validating'), ('failed', 'failed'), ('in_progress', 'in_progress'), ('finalizing', 'finalizing'), ('completed', 'completed'), ('expired', 'expired'), ('cancelling', 'cancelling'), ('cancelled', 'cancelled')], help_text='The current status of the batch.', max_length=20)),
                ('cancelled_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch was cancelled.', null=True)),
                ('cancelling_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch started cancelling.', null=True)),
                ('completed_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch was completed.', null=True)),
                ('errors', models.JSONField(blank=True, help_text='List of errors for the batch.', null=True)),
                ('expired_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch expired.', null=True)),
                ('expires_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch will expire.', null=True)),
                ('failed_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch failed.', null=True)),
                ('finalizing_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch started finalizing.', null=True)),
                ('in_progress_at', models.PositiveIntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the batch started processing.', null=True)),
                ('metadata', models.JSONField(blank=True, help_text='Metadata attached to the batch.', null=True)),
                ('request_counts', models.JSONField(blank=True, help_text='The request counts for different statuses within the batch.', null=True)),
                ('error_file', models.ForeignKey(blank=True, help_text='The file containing the outputs of requests with errors.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='batch_error_files', to='management.fileobject')),
                ('input_file', models.ForeignKey(help_text='The input file for the batch.', on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='management.fileobject')),
                ('output_file', models.ForeignKey(blank=True, help_text='The file containing the outputs of successfully executed requests.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='batch_output_files', to='management.fileobject')),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
            },
        ),
    ]
