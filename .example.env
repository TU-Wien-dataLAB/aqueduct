# These settings will work out-of-the-box with the provided docker-compose setup.
# You will have to adjust them if you want to run Aqueduct in any other way.

# Router settings
LITELLM_ROUTER_CONFIG_FILE_PATH=/app/example_router_config.yaml

# OIDC Configuration for local Dex (see mock-dex-config.yaml)
OIDC_OP_JWKS_ENDPOINT=http://dex:5556/dex/keys
OIDC_RP_CLIENT_ID=example-app
OIDC_RP_CLIENT_SECRET=ZXhhbXBsZS1hcHAtc2VjcmV0
OIDC_OP_AUTHORIZATION_ENDPOINT=http://localhost:5556/dex/auth
OIDC_OP_TOKEN_ENDPOINT=http://dex:5556/dex/token
OIDC_OP_USER_ENDPOINT=http://dex:5556/dex/userinfo

# Database Engine
# Can be 'django.db.backends.sqlite3' or 'django.db.backends.postgresql'
DATABASE_ENGINE=django.db.backends.postgresql
# DATABASE_ENGINE=django.db.backends.sqlite3

# PostgreSQL configuration (These are optional but allow customization)
POSTGRES_DB=aqueduct
POSTGRES_USER=aqueduct
POSTGRES_PASSWORD=aqueduct
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Django settings (you can also add other Django-related settings here)
SECRET_KEY=...                           # Django secret key for secure hash generation
DJANGO_DEBUG=True                        # Set to True to enable debug mode
ALLOWED_HOSTS=localhost                  # Separate multiple hosts with a space

# Celery settings
CELERY_BROKER_URL=redis://redis:6379/0   # Use the docker-compose service name rather than localhost

# Tika settings
TIKA_SERVER_URL=http://tika:9998         # Use the docker-compose service name rather than localhost

# MCP settings
MCP_CONFIG_FILE_PATH=/app/test-mcp.json

# Only used by examples - sensitive information should be replaced with ...
AQUEDUCT_GATEWAY_ACCESS_TOKEN=...
ENDPOINT_ACCESS_TOKEN=...
