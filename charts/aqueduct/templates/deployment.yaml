apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ .Values.routerConfig | toString | sha256sum }}
        checksum/mcp-config: {{ .Values.mcpConfig | toString | sha256sum }}
        checksum/settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | toString | sha256sum }}
      labels:
        app: {{ .Release.Name }}
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: kubernetes.io/hostname
      containers:
        - name: django
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8000
          env:
            {{- include "aqueduct.env" . | nindent 12 }}
          volumeMounts:
            - name: settings-py
              mountPath: /app/aqueduct/aqueduct/settings.py
              subPath: settings.py
            - name: staticfiles
              mountPath: /app/aqueduct/staticfiles
            - name: router-config
              mountPath: /etc/aqueduct/router_config.yaml
              subPath: router_config.yaml
            - name: mcp-config
              mountPath: /etc/aqueduct/mcp.json
              subPath: mcp.json
            {{- if .Values.persistence.files.enabled }}
            - name: files
              mountPath: {{ .Values.persistence.files.mountPath }}
            {{- end }}
      initContainers:
        - name: collectstatic
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "python", "manage.py", "collectstatic", "--noinput", "--clear" ]
          volumeMounts:
            - name: staticfiles
              mountPath: /app/aqueduct/staticfiles
        - name: migrate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "python", "manage.py", "migrate" ]
          env:
            {{- include "aqueduct.env" . | nindent 12 }}
          volumeMounts:
            - name: settings-py
              mountPath: /app/aqueduct/aqueduct/settings.py
              subPath: settings.py
        # sidecar container for celery beat
        - name: celery-beat
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          restartPolicy: Always
          command: [ "python", "-m", "celery", "-A", "aqueduct", "beat", "-l", "INFO" ]
          env:
            {{- include "aqueduct.env" . | nindent 12 }}
          volumeMounts:
            - name: settings-py
              mountPath: /app/aqueduct/aqueduct/settings.py
              subPath: settings.py
      volumes:
        - name: settings-py
          configMap:
            name: {{ .Release.Name }}-settings
        - name: staticfiles
          emptyDir: { }
        - name: router-config
          configMap:
            name: {{ .Release.Name }}-router-config
        - name: mcp-config
          configMap:
            name: {{ .Release.Name }}-mcp-config
        {{- if .Values.persistence.files.enabled }}
        - name: files
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-files
        {{- end }}
