services:
  dex:
    image: dexidp/dex:v2.42.1
    container_name: dex
    ports:
      - "5556:5556"
    volumes:
      - ./mock-dex-config.yaml:/etc/dex/config.yaml
    command: [ "dex", "serve", "/etc/dex/config.yaml" ]

  migrate:
    build: .
    container_name: django_migrate
    command: python manage.py migrate
    env_file:
      - .example.env
    depends_on:
      - db

  web:
    build: .
    container_name: django_app
    command: |
      sh -c "python manage.py collectstatic --no-input && daphne -b 0.0.0.0 -p 8000 aqueduct.asgi:application"
    volumes:
      - ./example_router_config.yaml:/app/example_router_config.yaml
    ports:
      - "8000:8000"
    env_file:
      - .example.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - migrate
      - dex
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys, httpx; httpx.get('http://localhost:8000/health', timeout=4).raise_for_status()"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 2s

  redis:
    image: redis:8.2.1

  celery:
    build: .
    volumes:
      - ./example_router_config.yaml:/app/example_router_config.yaml
    env_file:
      - .example.env
    depends_on:
      - redis
      - migrate
    command: celery -A aqueduct worker -l INFO

  celery-beat:
    build: .
    env_file:
      - .example.env
    depends_on:
      - redis
      - migrate
    command: celery -A aqueduct beat -l INFO

  db:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .example.env

volumes:
  postgres_data:
